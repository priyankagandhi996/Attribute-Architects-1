--Trigger to prevent adding an employee with a Terminated manager---
CREATE OR REPLACE TRIGGER prevent_terminated_manager
BEFORE INSERT ON EMPLOYEEP
FOR EACH ROW
DECLARE
    manager_status CHAR(1);
BEGIN
    -- Retrieve the status of the manager
    SELECT EmployeeStatus INTO manager_status
    FROM EMPLOYEEP
    WHERE EmployeeID = :NEW.ManagerID;

    -- Check if the manager is terminated
    IF manager_status = 'T' THEN
        raise_application_error(-20001, 'Cannot assign a manager with EmployeeStatus = ''T''');
    END IF;
END;

--Trigger to prevent terminating an employee if they are still assigned as an employee's manager--
CREATE OR REPLACE PROCEDURE is_employee_manager(
    p_employee_id IN EMPLOYEEP.EmployeeID%TYPE,
    p_result OUT BOOLEAN
)
IS
    v_employee_count NUMBER;
BEGIN
    -- Check if the employee is a manager for anyone
    SELECT COUNT(*)
    INTO v_employee_count
    FROM EMPLOYEEP
    WHERE ManagerID = p_employee_id AND EmployeeStatus = 'A';
    DBMS_OUTPUT.PUT_LINE(v_employee_count);
    -- Set the result based on the count
    p_result := (v_employee_count > 0);
END is_employee_manager;
/

set serveroutput on;
DECLARE
    v_result BOOLEAN;
BEGIN
    is_employee_manager(1399, v_result);
    DBMS_OUTPUT.PUT_LINE('Is a manager: ' || CASE WHEN v_result THEN 'TRUE' ELSE 'FALSE' END);
END;
/
